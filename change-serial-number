#!/usr/bin/perl
# melk, a dns thingie
#
#  Copyright (C) 2001-2023 Mattias Wadenstein et al.
#  https://github.com/accumu/melk
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published
#  by the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.


use warnings;
use strict;

use Getopt::Long;
use List::Util qw(max);
use File::Temp qw /tempfile/;

sub getsoa {
  my ($zone, $server) = @_;
  my @cmd = qw{host -t soa};
  push @cmd, '-T' if($server);
  push @cmd, $zone;
  push @cmd, $server if($server);

  my @a = grep(/SOA/, `@cmd`);

  if(scalar(@a) == 1) {
    return split / /, $a[0];
  }

  return undef;
}

my $verbose=0;
my $do_reload = 0;

GetOptions("verbose" => \$verbose, "reload" => \$do_reload);

if(scalar(@ARGV) == 0) {
  print "Usage: $0 [--verbose] [--reload] [name of header files to change serial number in]\n";
  print "  --verbose verbose\n";
  print "  --reload do rndc reload zone\n";
  exit;
}

my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime(time);
$year+=1900;
$mon++;
my $newserial = sprintf "%02d%02d%02d00", $year , $mon , $mday;

foreach my $file ( @ARGV ) {
  my ($dir,$basn)=split /\//, $file;
  my $zone;
  if($dir =~ /^[0-9.]+$/) {
    $zone = join(".",(reverse(split(/\./, $dir)),"in-addr.arpa"));
  # Looks like a ipv6 reverse zone at UmU
  } elsif($dir =~ /20016b0e([0-9a-f]+)/) {
        $zone = join(".",(reverse(split(//,$1)),"e.0.0.0.0.b.6.0.1.0.0.2.ip6.arpa"));
  } elsif($dir =~ /20016b019/) {
        $zone = "9.1.0.0.0.b.6.0.1.0.0.2.ip6.arpa";
  } else {
    $zone = $dir;
  }
  my @SOA = getsoa($zone, "localhost");
  if(!@SOA) {
    @SOA = getsoa($zone);
  }
  if(!@SOA) {
    warn "Couldn't get SOA from DNS";
  }
  my $soaserial = 0;
  if($SOA[6] =~ /^\d+$/) {
    $soaserial = $SOA[6];
  }

  if(! -f $file && ! -f "$file.in") {
    die "No $file or $file.in, aborting.\n";
  }

  my $fserial = 0;
  if(-f $file) {
    open(my $curr, $file) || die "open $file: $!";
    while(<$curr>) {
      if(/^\s+(\d{10})\s+\;\s+Serial/) {
	$fserial = $1;
	last;
      }
    }
    close($curr) or die "close $file: $!";
  }
  $newserial = max($newserial, $fserial, $soaserial);
  $newserial++;
  print "soa: $soaserial and file: $fserial => newserial: $newserial \n" if $verbose;

  my $infile = $file;
  if(-f "$file.in") {
    $infile = "$file.in";
  }
  open(my $in, $infile) || die "open $infile: $!";
  my($out, $tmpout) = tempfile("$file.XXXXXX");
  while(<$in>) {
    if(/^\s+(\d{10})\s+\;\s+Serial/) {
      printf $out "\t\t\t%d\t; Serial\n", $newserial;
    } else {
      print $out $_;
    }
  }
  close($in) or die "close $infile: $!";
  close($out) or die "close $tmpout: $!";
  chmod(0666 &~ umask, $tmpout); # tempfile creates secret files
  rename($file, "$file.OLD") || die "rename $file $file.OLD: $!";
  rename($tmpout, $file) || die "rename $tmpout $file: $!";
  printf "%s is now revision %d\n", $file, $newserial;

  if ($do_reload) {
      if (!system("rndc status >/dev/null 2>&1")) {
	  print "rndc reload $zone\n" if ($verbose);
	  system("rndc reload $zone") == 0 or print "rndc reload $zone failed: $?\n";
      } else {
	  print "rndc status failed: $?. Not reloading $zone\n" if $verbose;
      }
  }
}
